(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{416:function(t,a,r){"use strict";r.r(a);var s=r(13),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),r("h2",{attrs:{id:"_1、创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建型模式"}},[t._v("#")]),t._v(" 1、创建型模式")]),t._v(" "),r("p",[t._v("创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。")]),t._v(" "),r("h3",{attrs:{id:"工厂方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" "),r("RouterLink",{attrs:{to:"/patterns/factory_method.html"}},[t._v("工厂方法")])],1),t._v(" "),r("p",[t._v("在父类中提供一个创建对象的接口以允许子类决定实例化对象的类型。")]),t._v(" "),r("h3",{attrs:{id:"抽象工厂"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),r("p",[t._v("让你能创建一系列相关的对象，而无需指定其具体类。")]),t._v(" "),r("h3",{attrs:{id:"生成器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),r("p",[t._v("使你能够分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。")]),t._v(" "),r("h3",{attrs:{id:"原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),r("p",[t._v("让你能够复制已有对象，而又无需使代码依赖它们所属的类。")]),t._v(" "),r("h3",{attrs:{id:"单例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[t._v("#")]),t._v(" 单例")]),t._v(" "),r("p",[t._v("让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。")])])}),[],!1,null,null,null);a.default=e.exports}}]);