(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{418:function(t,a,s){"use strict";s.r(a);var n=s(13),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"工厂方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" 工厂方法💫")]),t._v(" "),s("h2",{attrs:{id:"_1-为什么要使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要使用"}},[t._v("#")]),t._v(" 1. 为什么要使用😇")]),t._v(" "),s("p",[s("strong",[t._v("工厂方法模式")]),t._v("是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。")]),t._v(" "),s("blockquote",[s("p",[t._v("《"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("深入设计模式")]),s("OutboundLink")],1),t._v("》工厂方法模式")])]),t._v(" "),s("h2",{attrs:{id:"_2-使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用场景"}},[t._v("#")]),t._v(" 2. 使用场景")]),t._v(" "),s("p",[s("strong",[t._v("降低代码复杂度及解偶时可以使用工厂模式。")])]),t._v(" "),s("p",[t._v("新建对象都是使用new直接创建对象，这样在添加类似功能时，该对象需要大面积重写，这时候可以使用工厂模式，通过工厂模式进行对象创建，使用的也是new，只不过把对象创建交给工厂去做，新的对象就是工厂生产出来的产品，不同的工厂可以生产不同的产品。")]),t._v(" "),s("p",[t._v("如：A饮品加工厂可以生产矿泉水、碳酸饮料、茶饮料等等；B饮品加工厂可以生产咖啡、果汁等。")]),t._v(" "),s("p",[s("strong",[t._v("以下是工厂模式的主要使用场景：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当在编写代码的过程中， 如果无法预知对象确切类别及其依赖关系时，可使用工厂方法。")]),t._v(" "),s("ul",[s("li",[t._v("工厂方法将创建产品的代码与实际使用产品的代码分离， 从而能在不影响其他代码的情况下扩展产品创建部分代码。")])])]),t._v(" "),s("li",[s("p",[t._v("如果希望用户能扩展软件库或框架的内部组件， 可使用工厂方法。")]),t._v(" "),s("ul",[s("li",[t._v("继承可能是扩展软件库或框架默认行为的最简单方法，将各框架中构造组件的代码集中到单个工厂方法中， 并在继承该组件之外允许任何人对该方法进行重写。")])])]),t._v(" "),s("li",[s("p",[t._v("复用现有对象来节省系统资源， 而不是每次都重新创建对象， 可使用工厂方法。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现方式"}},[t._v("#")]),t._v(" 3. 实现方式")]),t._v(" "),s("h3",{attrs:{id:"_3-1-类图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-类图"}},[t._v("#")]),t._v(" 3.1 类图")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tcs.teambition.net/storage/30238b5a27be7a88a146313221be3070b998?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTYxNzg2Mzk2OCwiaWF0IjoxNjE3MjU5MTY4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMwMjM4YjVhMjdiZTdhODhhMTQ2MzEzMjIxYmUzMDcwYjk5OCJ9._JBOFF4BxXQK9r3pxyfEFIfqx7oCF1y1TqbCmDmWu2Y&download=factory_method.svg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_3-3-实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-实现方式"}},[t._v("#")]),t._v(" 3.3 实现方式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("CreatorFactory 创建工厂抽象类，其 create 方法必须返回值必须为产品接口为保证子类一定覆盖夫类 create 方法，需将 create 方法设置为抽象方法。")]),t._v(" "),s("ul",[s("li",[t._v("注意， 并不一定每次调用工厂方法都会"),s("strong",[t._v("创建")]),t._v("新的实例。 工厂方法也可以返回缓存、 对象池或其他来源的已有对象。")])])]),t._v(" "),s("li",[s("p",[t._v("CreatorFactory 创建工厂主要职责并非创建产品，其中通常会包含一些核心业务，其 render 方法为该工厂核心业务。")])]),t._v(" "),s("li",[s("p",[t._v("Product 产品接口，所有具体产品必须实现该接口，该接口内定义产品的公共操作，其 do 方法为 Product 产品的公共操作。")])])]),t._v(" "),s("h2",{attrs:{id:"_4-优点缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-优点缺点"}},[t._v("#")]),t._v(" 4. 优点缺点")]),t._v(" "),s("h3",{attrs:{id:"_4-1-优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-优点"}},[t._v("#")]),t._v(" 4.1 优点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("可以避免创建者和具体产品之间的紧密耦合。")])]),t._v(" "),s("li",[s("p",[s("em",[t._v("单一职责原则")]),t._v("。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。")])]),t._v(" "),s("li",[s("p",[s("em",[t._v("开闭原则")]),t._v("。 无需更改现有客户端代码，你就可以在程序中引入新的产品类型。")])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-缺点"}},[t._v("#")]),t._v(" 4.2 缺点")]),t._v(" "),s("ol",[s("li",[t._v("应用工厂方法模式需要引入许多新的子类，代码可能会因此变得更复杂。最好的情况是将该模式引入创建者类的现有层次结构中。")])]),t._v(" "),s("h2",{attrs:{id:"_5-工厂方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-工厂方法"}},[t._v("#")]),t._v(" 5. 工厂方法")]),t._v(" "),s("h3",{attrs:{id:"_5-1-ioc框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-ioc框架"}},[t._v("#")]),t._v(" 5.1 IOC框架")]),t._v(" "),s("p",[s("strong",[t._v("如果项目中使用IOC框架（Spring）并且复用现有对象，可以参考该方式。")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将不同的Product实现按照约定格式指定beanName注入，比如：@Component(“XmlProduct”)。")])]),t._v(" "),s("li",[s("p",[t._v("使用时通过 applicationContext.getBean(typeSuffix+Product) 即可。")])]),t._v(" "),s("li",[s("p",[t._v("拓展可以通过写一个xxProduct，进行注入。")])])]),t._v(" "),s("p",[s("strong",[t._v("工厂方法示例：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreatorFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Product")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" suffix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InstanceLocator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("suffix"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Product"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("优点：可以减少工厂类创建，扩展更加容易。")]),t._v(" "),s("h3",{attrs:{id:"_5-2-map形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-map形式"}},[t._v("#")]),t._v(" 5.2 Map形式")]),t._v(" "),s("p",[s("strong",[t._v("如果工厂生产产品为复用现有对象，可以参考该形式。")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将不同的Product进行提前初始化并存放至Map内。")])]),t._v(" "),s("li",[s("p",[t._v("创建初始化方法，传入对应产品key获取对应产品。")])]),t._v(" "),s("li",[s("p",[t._v("扩展可以通过在工厂方法Map内添加新的Product。")])])]),t._v(" "),s("p",[s("strong",[t._v("工厂方法示例：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreatorFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),t._v(" cachedFactories "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\tcachedFactories"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteProductA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\tcachedFactories"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteProductB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Product")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cachedFactories"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_6-其它设计模式关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-其它设计模式关系"}},[t._v("#")]),t._v(" 6 其它设计模式关系")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("抽象工厂模式")]),t._v("通常基于一组工厂方法。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("工厂方法")]),t._v("是"),s("strong",[t._v("模板方法模式")]),t._v("的一种特殊形式。 同时， "),s("em",[t._v("工厂方法")]),t._v("可以作为一个大型"),s("em",[t._v("模板方法")]),t._v("中的一个步骤。")])]),t._v(" "),s("li",[s("p",[t._v("可以同时使用"),s("strong",[t._v("工厂方法")]),t._v("和"),s("strong",[t._v("迭代器模式")]),t._v("来让子类集合返回不同类型的迭代器， 并使得迭代器与集合相匹配。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("工厂模式")]),t._v("可以演化为使用"),s("strong",[t._v("抽象工厂模式")]),t._v("、 "),s("strong",[t._v("原型模式")]),t._v("或"),s("strong",[t._v("生成器模式")]),t._v("。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("《"),s("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("深入设计模式")]),s("OutboundLink")],1),t._v("》工厂方法模式")])])])}),[],!1,null,null,null);a.default=r.exports}}]);